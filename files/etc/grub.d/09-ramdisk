#! /bin/sh


prefix="/usr"
exec_prefix="${prefix}"
datarootdir="${prefix}/share"

. "${datarootdir}/grub/grub-mkconfig_lib"

# Load ramdisk image name
if test -e /boot/ramdisk/ramdisk.conf; then
    . /boot/ramdisk/ramdisk.conf
fi

# Device containing our /boot partition.
# For RAMdisk the recommendation is to use a standalone /boot partition.
#
# The boot device is determined here since we want to run this script
# generator in a standalone mode to build PXE and ISO grub configuration.
GRUB_DEVICE_BOOT="`${grub_probe} --target=device /boot`"
GRUB_DEVICE_BOOT_UUID="`${grub_probe} --device ${GRUB_DEVICE_BOOT} --target=fs_uuid 2> /dev/null`" || true

CLASS="--class gnu-linux --class gnu --class os"

if [ "x${GRUB_DISTRIBUTOR}" = "x" ] ; then
  OS=GNU/Linux
else
  OS="${GRUB_DISTRIBUTOR} GNU/Linux"
  CLASS="--class $(echo ${GRUB_DISTRIBUTOR} | tr 'A-Z' 'a-z' | cut -d' ' -f1) ${CLASS}"
fi


cat <<EOF

# \$1: baseimage
# \$2: initrd
# \$3: rel_dirname
function setup_tmpfs_vars {
    if test "\$root" == "pxe"; then
        set kernel="(pxe)$grub_tmpfs_pxe_prefix/$grub_tmpfs_pxe_role/vmlinuz"
        set initrd="(pxe)$grub_tmpfs_pxe_prefix/$grub_tmpfs_pxe_role/initrd"
        set tmpfs_boot=""
        set tmpfs_root="$grub_tmpfs_pxe_url/$(basename $target)"
    elif test "\$root" == "hd96"; then
        set kernel="/boot/\${1}"
        set initrd="/boot/\${2}"
        set tmpfs_boot="LABEL=ISOIMAGE"
        set tmpfs_root="/boot/tmpfs/$(basename $target)"
    else
        set kernel="\${3}/\${1}"
        set initrd="\${3}/\${2}"
        tmpfs_boot="UUID=$GRUB_DEVICE_BOOT_UUID"
        set tmpfs_root="\${3}/tmpfs/$(basename $target)"
    fi
}

EOF

linux_entry ()
{
  os="$1"
  version="$2"
  recovery="$3"
  args="$4"
  if ${recovery} ; then
    title="$(gettext_quoted "%s, with Linux %s (recovery mode)")"
  else
    title="$(gettext_quoted "%s, with Linux %s")"
  fi
  printf "menuentry 'RAMdisk ${title}' ${CLASS} {\n" "${os}" "${version}"
  if ! ${recovery} ; then
      save_default_entry | sed -e "s/^/\t/"
  fi

  cat << EOF
	insmod gzio
        setup_tmpfs_vars "$basename" "$initrd" "$rel_dirname"
EOF

  # if [ x$dirname = x/ ]; then
  #   if [ -z "${prepare_root_cache}" ]; then
  #     prepare_root_cache="$(prepare_grub_to_access_device ${GRUB_DEVICE} | sed -e "s/^/\t/")"
  #   fi
  #   printf '%s\n' "${prepare_root_cache}"
  # else
  #   if [ -z "${prepare_boot_cache}" ]; then
  #     prepare_boot_cache="$(prepare_grub_to_access_device ${GRUB_DEVICE_BOOT} | sed -e "s/^/\t/")"
  #   fi
  #   printf '%s\n' "${prepare_boot_cache}"
  # fi
  message="$(gettext_printf "Loading Linux %s ..." ${version})"
  cat << EOF
	echo	'$message'
	linux	\$kernel boot=tmpfs root=\$tmpfs_root tmpfs_boot=\$tmpfs_boot ro ${args}
EOF
  if test -n "${initrd}" ; then
    message="$(gettext_printf "Loading initial ramdisk ...")"
    cat << EOF
	echo	'$message'
	initrd	\$initrd
EOF
  fi
  cat << EOF
}
EOF
}


# Search all kernel
case x`uname -m` in
    xi?86 | xx86_64)
	list=`for i in /boot/vmlinuz-* /vmlinuz-* /boot/kernel-* ; do
                  if grub_file_is_not_garbage "$i" ; then echo -n "$i " ; fi
              done` ;;
    *)
	list=`for i in /boot/vmlinuz-* /boot/vmlinux-* /vmlinuz-* /vmlinux-* /boot/kernel-* ; do
                  if grub_file_is_not_garbage "$i" ; then echo -n "$i " ; fi
	     done` ;;
esac



while [ "x$list" != "x" ] ; do
    linux=`version_find_latest $list`
    echo "Found linux image: $linux" >&2
    basename=`basename $linux`
    dirname=`dirname $linux`
    rel_dirname=`make_system_path_relative_to_its_root $dirname`
    version=`echo $basename | sed -e "s,^[^0-9]*-,,g"`
    alt_version=`echo $version | sed -e "s,\.old$,,g"`
    linux_root_device_thisversion="${LINUX_ROOT_DEVICE}"

    # find matching initrd for current kernel
    initrd=
    for i in "initrd.img-${version}" \
		 "initrd-${version}.img" \
		 "initrd-${version}" "initramfs-${version}.img" \
		 "initrd.img-${alt_version}" "initrd-${alt_version}.img" \
		 "initrd-${alt_version}" "initramfs-${alt_version}.img" \
		 "initramfs-genkernel-${version}" \
		 "initramfs-genkernel-${alt_version}"; do
	if test -e "${dirname}/${i}" ; then
	    initrd="$i"
	    break
	fi
    done

  linux_entry "${OS}" "${version}" false \
      "${GRUB_CMDLINE_LINUX} ${GRUB_CMDLINE_LINUX_DEFAULT}"

    
    list=`echo $list | tr ' ' '\n' | grep -vx $linux | tr '\n' ' '`
done


