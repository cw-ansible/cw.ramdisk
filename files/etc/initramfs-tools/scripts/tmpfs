# -*- sh -*-
# set -x

retry_nr=0

# This is where /boot is mounted
local_mount=/local

# Path to unlock fifo
pass_fifo="/unlock"

gpg=/bin/gpg
gpg_opts="--decrypt --quiet --no-tty --passphrase-file $pass_fifo --passphrase-fd 3"
gpg_filter=


# check for tar xattrs support
tar_opts=
tar=/bin/tar
$tar --help | grep -q -F -- '--xattr'
if test $? -eq 0; then
    tar_opts="--xattrs --xattrs-include '*' --selinux --acls"
fi

# Mount type is either local or remote
mount_type=
fs_type=
boot_prefix=


# Wee need to unset the ROOT variable since /init call 'parse_numeric' which
# computes a root block device based upon:
#  - MAJOR:MINOR
#  - MAJORMINOR (hex encoded)
#
# thus if the ROOT ramdisk image starts with [0-9A-Fa-f] /init fails with an
# arithmetic error
ramdisk_root="${ROOT}"
ROOT=
export ROOT

# How many tries before giving up on network interface
DEVICE_MAX_TRIES=10


# How many tries before giving up mounting local disk
LOCAL_DRIVE_MAX_TRIES=30


# On some server the network interface is unpredictable, and since we don't
# have udev persistent rules on we thus have to force it to be sure tg3 is
# the first eths and bnx2x comes after that.
# See also _reload_modules function.
MODULE_ORDER="tg3 bnx2x"

_reload_modules() {
    local modules_to_load=""
    for mod in $MODULE_ORDER; do
	grep -q "^$mod[[:space:]]" /proc/modules
	if test $? -eq 0; then
            log_begin_msg "Removing module $mod"
	    rmmod $mod
	    modules_to_load="$modules_to_load $mod"
	    log_end_msg
	fi
    done
    for mod in $modules_to_load; do
	log_loading_msg "Loading module $mod"
	modprobe $mod
	log_end_msg
    done
}

_set_network() {
    # give a chance for tg3 links to come up.
    for DEVICE in $(ifconfig -a | awk '{if($2=="Link"&&$3=="encap:Ethernet"){print $1}}'); do
	# if /run/net-${DEVICE}.conf exists there is a slight chance the
	# network interface has ben set up
	if test -e /run/net-${DEVICE}.conf; then
	    return
	fi
	log_begin_msg "Bringing $DEVICE up"
	ifconfig $DEVICE up
	
	# on some device we have to wait until they become ready.
	i=0
	while test $i -lt $DEVICE_MAX_TRIES; do
	    grep -qF up /sys/class/net/$DEVICE/operstate 
	    if test $? -eq 0; then
		break
	    fi
	    sleep 1
	    i=$(( $i + 1 ))
	    log_begin_msg "."
	done

	# if interface is still not there give up.
	if test $? -ge $DEVICE_MAX_TRIES; then
	    log_failure_msg "is $DEVICE connected?"
	    continue
	fi

	# configure network only if interface is UP
	grep -qF up /sys/class/net/$DEVICE/operstate
	if test $? -eq 0; then
	    configure_networking
	fi
	
	#ipconfig -t 5 $DEVICE
	if test -e /run/net-$DEVICE.conf;  then
            break
	fi
    done
}


# Kernel boot parameter:
# https://www.kernel.org/doc/Documentation/kernel-parameters.txt

# Create a tmpfs into $rootmnt
# The tmpfs size is given by root_tmpfs_size or 50% of available memory.
#
# See mount(8)
_create_tmpfs() {
    df -P | grep -q ${rootmnt}
    if test $? -ne 0; then

	root_tmpfs_size=${root_tmpfs_size:-50%}
	
	log_begin_msg "Creating tmpfs root into ${rootmnt} of $(echo ${root_tmpfs_size} | sed 's/%/%%/g')'."
	mount -o size=${root_tmpfs_size} -t tmpfs none ${rootmnt}
	log_end_msg
    fi
}


# Get tar compression option regarding file basename extension.
_get_tar_compression() {
    local file=$(basename $1 .gpg)
    case ${file} in
	*.tar.gz|*.tgz) echo '--gzip' ;;
        *.tar.bz2|*.tbz2) echo '--bzip2' ;;
	*.tar.Z|*.taz) echo '--compress' ;;
        *.tar.xz) echo '--xz' ;;
	*.tar.lz|*.tlz) echo '--lzip' ;;
	*.tar.lzo|*.tzo) echo '--lzop' ;;
	*.tar.lzma) echo '--lzma' ;;
    esac
}

# check is file is a gpg encrypted on
_get_gpg_filer() {
    local file=$(basename $1)
    gpg_filter=
    case ${file} in
	*.gpg)
	    if ! test -e ${pass_fifo}; then
		mkfifo ${pass_fifo}
	    fi

	    #/lib/cryptsetup/askpass "Password for ${file}: " > ${pass_fifo} &
	    gpg_filter="${gpg} ${gpg_opts}"
	    if test -n "${tmpfs_password}"; then
		cat <<EOF
*** DANGER: SECURITY FLAW ***

Providing a 'tmpfs_password' in grub is a REALLY BAD IDEA. This should be
done for rescue or debugging purposes only.

Please consider using SSH to unlock your ramdisk image.

*** DANGER ***

EOF
		sleep 3
		log_begin_msg "Using grub provided password for ${file}"
		echo ${tmpfs_password} > ${pass_fifo} &
		log_end_msg
	    else
		cat <<EOF

File ${file} is passphrase protected.

You can either enter the passphrase on via SSH:

  ssh root@$(ifconfig | sed -n 's/.*inet addr:\([^ ]\+\).*/\1/p' | tail -n 1)
  echo PASSPHRASE > /lib/cryptsetup/passfifo

Or add a 'tmpfs_password' variable in grub interface:
 - Hit 'e' on the grub boot entry
 - Search for 'linux' option
 - Add 'tmpfs_password="Secret"'
 - Hit 'Ctrl-x'

Or enter password in the console.

Please note that if plymouth is installed the console passphrase entry may
be broken. To remove plymouth on Debian/Ubuntu, you can use 'no-plymouth'
https://github.com/renard/no-plymouth

EOF
		# This does not work
		# /lib/cryptsetup/askpass "Password for ${file}: " > ${pass_fifo}
		# echo >> ${pass_fifo}
		_pass=$(/lib/cryptsetup/askpass "Password for ${file}: ")
		if test -n "${_pass}"; then
		    echo ${_pass} > ${pass_fifo} &
		fi
	    fi
	    ;;
	*)
	    gpg_filter="cat"
	    ;;
    esac
}



_check_local_device() {
    # When booting some USB device we have to wait until they become ready.
    local device=$1
    local i=0
    while test $i -lt $LOCAL_DRIVE_MAX_TRIES; do
	if test -e $device; then
	    break
	fi
	sleep 1
	i=$(( $i + 1 ))
	log_begin_msg "."
    done
}


## Try to find a boot device as given by first parameter.
#  the boot device can be something like:
#    - /dev/sda1
#    - LABEL=boot
#    - ID=ata-QEMU_DVD-ROM_QM00003
#    - UUID=2ce7c176-eb32-4ab7-9c66-5237f6f04a61
#    - PARTLABEL=primary
#    - PARTUUID=a7bd135c-9b6c-48b7-b386-cd2f82c8e5f6
#
# Note that UUID, PARTUUID and PARTLABEL may not be supported by all Linux
# versions.
_find_device() {
    local boot_device="${1}"

    # if tmpfs_boot is a direct device, use it.
    echo ${boot_device} | grep -q -F =
    if test $? -ne 0; then
	echo ${boot_device}
	return
    fi

    local type=$(echo ${boot_device} | cut -f1 -d= | tr 'A-Z' 'a-z')
    local value=$(echo ${boot_device} | cut -f2 -d=)
    local device="/dev/disk/by-${type}/${value}"

    if test -e "${device}"; then
	if ! test -d "${device}"; then
	    echo "${device}"
	    return
	fi
    fi
}

# mount local
##
##  /dev/vda1:file
_mount_local() {
    mkdir -p ${local_mount}
    
    local _dev=
    local _method=

    for bd in "${tmpfs_boot}"; do
	log_begin_msg "Looking for ${bd}"
	_dev=$(_find_device "${bd}")
	echo "_dev = $_dev"
	if test -z "${_dev}"; then
	    log_failure_msg "not found"
	    continue
	fi
	log_end_msg "Found at ${_dev}"
	break
    done

    if test -z "${_dev}"; then
	panic <<EOF

Cannot find /boot device partition.
Please provide a tmpfs_boot as kernel boot parameter:
  - tmpfs_boot=/dev/sda1
  - tmpfs_boot=LABEL=boot
  - tmpfs_boot=ID=ata-QEMU_DVD-ROM_QM00003
  - tmpfs_boot=UUID=2ce7c176-eb32-4ab7-9c66-5237f6f04a61
  - tmpfs_boot=PARTLABEL=primary
  - tmpfs_boot=PARTUUID=a7bd135c-9b6c-48b7-b386-cd2f82c8e5f6

EOF
    fi

    
    fs_type=$(/sbin/blkid -s TYPE -o value ${_dev})
    _check_local_device "${_dev}"
    mount -t ${fs_type} "${_dev}" ${local_mount}

    export fs_type
    local rd=
    for location in "" "boot"; do
	if test -e ${local_mount}/${location}/${ramdisk_root}; then
	    rd=${location}/${ramdisk_root}

	    # export boot_prefix for future use in
	    # scripts/init-bottom/00-ensure-fstab
	    if test -n "${location}"; then
		boot_prefix=${location}
		export boot_prefix
	    fi
	    
	    break
	fi
    done

    # Try to fallback to an existing system image.
    if test -z "${rd}"; then
	log_begin_msg "Trying to find a fallback image"
	log_end_msg
	cd ${local_mount}
	if test -d boot; then
	    cd boot;
	fi
	if test -d tmpfs; then
	    rd=$(find tmpfs -type f \
		      -name '*.tar.gz' -o -name '*.tar.gz.gpg' -o \
		      -name '*.tgz' -o -name '*.tgz.gpg' -o \
		      -name '*.tar.bz2' -o -name '*.tar.bz2.gpg' -o \
		      -name '*.tbz2' -o -name '*.tbz2.gpg' -o \
		      -name '*.tar.Z' -o -name '*.tar.Z.gpg' -o \
		      -name '*.taz' -o -name '*.taz.gpg' -o \
		      -name '*.tar.xz' -o -name '*.tar.xz.gpg' -o \
		      -name '*.tar.lz' -o -name '*.tar.lz.gpg' -o \
		      -name '*.tlz' -o -name '*.tlz.gpg' -o \
		      -name '*.tar.lzo' -o -name '*.tar.lzo.gpg' -o \
		      -name '*.tzo' -o -name '*.tzo.gpg' -o \
		      -name '*.tar.lzma' -o -name '*.tar.lzma.gpg' \
			| head -n 1)
	    if test -n "${rd}"; then
		log_begin_msg "Found ${rd} ad fallback image"
		log_end_msg
	    fi
	fi
    fi

    if test -n "${rd}"; then
	log_begin_msg "Using ${rd} as system image"
	log_end_msg
	cd ${rootmnt}
	_get_gpg_filer ${local_mount}/${rd}
	${gpg_filter} ${local_mount}/${rd} \
	    | $tar --extract $(_get_tar_compression ${local_mount}/${rd}) \
		  $tar_opts --file -
    fi
    umount ${local_mount}

}

# local_mount=/local rootmnt=/root tmpfs_boot=/dev/sdc1 ramdisk_root=master-dhcp.tar.gz  _mount_local

_mount_remote() {
    _tmpfs_proto=$(echo ${ramdisk_root} | sed -n 's,\(.\+\)://\([^/]\+\)/\(.\+\),\1,p')
    _tmpfs_host=$(echo ${ramdisk_root} | sed -n 's,\(.\+\)://\([^/]\+\)/\(.\+\),\2,p')
    _tmpfs_file=$(echo ${ramdisk_root} | sed -n 's,\(.\+\)://\([^/]\+\)/\(.\+\),\3,p')

    if test -z ${_tmpfs_host}; then
	panic "Could not find a remote host in ${ramdisk_root}."
    fi


    # Make sure network is up and working
    log_begin_msg "Try to reach ${_tmpfs_host}"
    ping -c2 ${_tmpfs_host} >/dev/null
    log_end_msg

    cd ${rootmnt}

    for url in ${ramdisk_root} $(echo ${overlays} | tr ';' ' '); do
        log_begin_msg "Retriving $url"
        log_end_msg

        case ${url} in
            *://*) ;;
	    # If url is not fully defined assume url is a local file in
	    # $rootmnt. This is mainly used to $overlays.
            *) url="file://${rootmnt}/${url}" ;;
        esac
	_get_gpg_filer ${url}

	curl -o - --no-buffer ${url} \
	    | ${gpg_filter} \
	    | $tar --extract $(_get_tar_compression ${url}) \
		  $tar_opts --file -
	
	if test $? -ne 0; then
	    is_full=$(df -P | awk "{if(\$NF==\"$rootmnt\"){print \$2==\$3}}")
	    if test $is_full -eq 1; then
		panic <<EOF

Couldn't download image $url.

No space left on device

Try to increase RAM or diet your image or add 'root_tmpfs_size' variable on grub
parameter.


EOF

	    fi
	fi
    done
}


do_tmpfsmount()
{
    _create_tmpfs
    
    case ${ramdisk_root} in
	*://*/*)
	    mount_type=remote
	    _mount_remote
	    ;;
        *)
	    mount_type=local
	    _mount_local
	    ;;
    esac
    
    # /bin/sleep 20
}

# TMPFS root mounting
mountroot()
{

    cat<<EOF

Booting from tmpfs ramdisk

© 2014 Sébastien Gross <seb |at| chezwam |dot| org>


EOF

    # For DHCP
    modprobe af_packet

    log_begin_msg "Waiting for udev"
    wait_for_udev 10
    log_end_msg

    maybe_break tmpfs-begin
    
    #configure_networking
    _set_network
    
    # Default delay is around 180s
    delay=${ROOTDELAY:-3}

    # We don't really need plymouth here since its use compromise the
    # crypsetup root filesystem unlocking.
    #
    # See: https://bugs.launchpad.net/ubuntu/+source/cryptsetup/+bug/595648
    plymouth=$(pidof plymouthd)
    if test -n "$plymouth"; then
	plymouth --quit
    fi

    maybe_break tmpfs-mount
    # loop until tmpfs succeeds
    do_tmpfsmount
    while [ ${retry_nr} -lt ${delay} ] && [ ! -e ${rootmnt}${init} ]; do
        log_begin_msg "Retrying tmpfs mount"
        /bin/sleep 1
        do_tmpfsmount
        retry_nr=$(( ${retry_nr} + 1 ))
        log_end_msg
    done

    if [ ! -e ${rootmnt}${init} ]; then

	case $mount_type in
	    'local')
		if test -e ${local_mount}/boot/${tmpfs_boot}; then
		    sleep 10
		    log_begin_msg "Root image found in ${local_mount}/boot/${tmpfs_boot}, trying..."
		    log_end_msg
		    export ROOT=boot/${tmpfs_boot}
		    do_tmpfsmount
		else
		    cat <<EOF

*** ERROR ***

Could not find image file in ${tmpfs_boot}. Trying local boot...

EOF
		    umount -l ${rootmnt}
		    ## TODO: implement a fallback device
		    export ROOT=${tmpfs_boot}
		    export init=${init}
		    . /scripts/local
		    maybe_break tmpfs-local
		    mountroot
		fi
		;;
	    'remote')
		panic <<EOF

*** ERROR ***

Could not find a boot device.

EOF
		;;
	esac
    fi

    # Run tmpfs bottom scripts
    maybe_break tmpfs-bottom
    [ "$quiet" != "y" ] && log_begin_msg "Running /scripts/tmpfs-bottom"
    run_scripts /scripts/tmpfs-bottom
    [ "$quiet" != "y" ] && log_end_msg
    
}
