#!/usr/bin/python
# -*- coding: utf-8 -*-

"""
# overlay --- manage overlays

"""

# Copyright © 2015 Sébastien Gross <seb•ɑƬ•chezwam•ɖɵʈ•org>
# Created: 2015-05-20
# Last changed: 2015-05-21 14:31:15

# This program is free software. It comes without any warranty, to
# the extent permitted by applicable law. You can redistribute it
# and/or modify it under the terms of the Do What The Fuck You Want
# To Public License, Version 2, as published by Sam Hocevar. See
# http://sam.zoy.org/wtfpl/COPYING for more details.


__author__ = "Sébastien Gross"
__copyright__ = """Copyright © 2015 Sébastien Gross <seb•ɑƬ•chezwam•ɖɵʈ•org>"""


import re
import yaml
import os
import shutil
import subprocess
import pipes






def run(cmd, stdout=True, stderr=True):
#    print(' '.join(pipes.quote(arg) for arg in cmd))
    proc = subprocess.Popen(
        cmd,
        stdout=stdout,
        stderr=stderr,
    )
    proc.wait()
    return proc

def hostname(fqdn=False):
    cmd = ['hostname']
    if fqdn is True:
        cmd += [ '-f' ]
    else:
        cmd += [ '-s' ]
    result = run(['hostname'], stdout=subprocess.PIPE)
    if result.returncode == 0:
        return result.stdout.read().split('\n')[0]
    return None

EXPENSION = {
    'HOSTNAME': hostname(),
    'FQDN': hostname(fqdn=True),
}



def load_yaml(filename):
    if os.path.exists(filename):
        ret = []
        for data in yaml.load_all(file(filename).read()):
            ret.append(data)
        return ret

    return None


def expand(s):
    '''Expand S'''
    for var in EXPENSION.keys():
        s = s.replace('${%s}' % var, EXPENSION[var])
    return s


def do_merge_dir(src, dest):
    run(['cp', '-v', '-R', '-n', src, dest])

def do_compute_files(hl, action, relative=False, remove=True):
    for h in hl:
        src = expand(h['src'])
        if not os.path.exists(src):
            print '%s not found' % src
            continue
        if not(os.path.exists(os.path.dirname(h['dest']))):
            os.makedirs(os.path.dirname(h['dest']))
        if remove and os.path.exists(h['dest']):
            os.unlink(h['dest'])
        if relative is not False:
            src = os.path.relpath(src, os.path.dirname(h['dest']))
            dest = h['dest']
            #dest = '%s/%s' % (os.path.dirname(src), dest)
        else:
            src = src
            dest = h['dest']

        # print('%s -> %s' % (src, dest))
        action(src, dest)

## TODO: ADD CMD
def __init__():
    yml = load_yaml('/boot/ramdisk/overlay.yml')
    for y in yml:
        if y is None:
            continue
        if y.has_key('hard-links'):
            do_compute_files(y['hard-links'], os.link)
        if y.has_key('links'):
            do_compute_files(y['links'], os.symlink, relative=True)
        if y.has_key('move'):
            do_compute_files(y['move'], shutil.move)
        if y.has_key('merge-dir'):
            do_compute_files(y['merge-dir'], do_merge_dir, remove=False)

if __name__ == "__main__":
    __init__()
