#!/usr/bin/python
# -*- coding: utf-8 -*-

"""
# overlay --- manage overlays

"""

# Copyright © 2015 Sébastien Gross <seb•ɑƬ•chezwam•ɖɵʈ•org>
# Created: 2015-05-20
# Last changed: 2015-10-05 17:01:17

# This program is free software. It comes without any warranty, to
# the extent permitted by applicable law. You can redistribute it
# and/or modify it under the terms of the Do What The Fuck You Want
# To Public License, Version 2, as published by Sam Hocevar. See
# http://sam.zoy.org/wtfpl/COPYING for more details.


__author__ = "Sébastien Gross"
__copyright__ = """Copyright © 2015 Sébastien Gross <seb•ɑƬ•chezwam•ɖɵʈ•org>"""


import re
import yaml
import os
import shutil
import subprocess
import pipes
import string
import shlex
import sys
import time

LOG=open('/var/log/ramdisk-overlay.log', 'w')

def log(msg, indent=0):
    LOG.write('%s %s%s\n' % (time.strftime("%d-%m-%Y %H:%M:%S"), indent*' ', msg))    


def run(cmd, stdout=True, stderr=True):
    log('Running: ' + ' '.join(pipes.quote(arg) for arg in cmd))
    proc = subprocess.Popen(
        cmd,
        stdout=stdout,
        stderr=stderr,
    )
    proc.wait()
    return proc

def hostname(fqdn=False):
    cmd = ['hostname']
    if fqdn is True:
        cmd += [ '-f' ]
    else:
        cmd += [ '-s' ]
    result = run(cmd, stdout=subprocess.PIPE, stderr=subprocess.PIPE) # do not remove stderr for Python2.6
    if result.returncode == 0:
        return result.stdout.read().split('\n')[0]
    return None

EXPENSION = {
    'HOSTNAME': hostname(),
    'FQDN': hostname(fqdn=True),
}



def load_yaml(filename):
    if os.path.exists(filename):
        ret = []
        for data in yaml.load_all(file(filename).read()):
            ret.append(data)
        return ret

    return None


def expand(s):
    '''Expand S'''
    try:
        return string.Template(s).substitute(EXPENSION)
    except KeyError:
        return s

def do_merge_dir(src, dest):
    run(['cp', '-v', '-R', '-n', src, dest])

def do_compute_files(hl, action, relative=False, remove=True):
    log('do_compute_files(%s, %s, %s, %s):' % (hl, action, relative, remove))
    for h in hl:
        src = expand(h['src'])
        if not os.path.exists(src):
            log('%s not found' % src, 2)
            print '%s not found' % src
            continue
        if not(os.path.exists(os.path.dirname(h['dest']))):
            log('making directory %s' % os.path.dirname(h['dest']), 2)
            os.makedirs(os.path.dirname(h['dest']))
        if remove and os.path.exists(h['dest']):
            log('making directory %s' % os.path.dirname(h['dest']), 2)
            os.unlink(h['dest'])
        if relative is not False:
            src = os.path.relpath(src, os.path.dirname(h['dest']))
            dest = h['dest']
            #dest = '%s/%s' % (os.path.dirname(src), dest)
        else:
            src = src
            dest = h['dest']
        log('link %s %s -> %s' % (action, h['dest'], src), 2)
        # print('%s -> %s' % (src, dest))
        action(src, dest)

def do_execute(hl):
    log('do_execute:')
    for h in hl:
        if type(h) == type({}):
            do_run = False
            if h.has_key('hostbased') and EXPENSION.has_key('HOSTBASED') \
               and h['hostbased'] == EXPENSION['HOSTBASED']:
                do_run = True
            if h.has_key('host') and EXPENSION.has_key('HOSTNAME') \
               and h['host'] == EXPENSION['HOSTNAME']:
                do_run = True
            if do_run is False:
                continue
            cmd = shlex.split(expand(h['cmd']))
        else:
            cmd = shlex.split(expand(h))
            
        try:
            log(' '.join(pipes.quote(arg) for arg in cmd), 2)
            proc = run(cmd)
        except:
            log('Command failled for unknown reason')
            continue
        if proc.returncode != 0:
            log('rc: %s' % (proc.returncode), 4)
            sys.stderr.write("Could not run %s\n" %
                             (' '.join(pipes.quote(arg) for arg in cmd)))

            
def compute_hostbased(yml):
    log('compute_hostbased:')
    if not yml.has_key('vars') or not yml['vars'].has_key('hostbased'):
        log('no rule found', 2)
        return
    
    for k in yml['vars']['hostbased']:
        log('testing %s' % k, 2)
        k_re = re.compile(k['regexp'])
        if k_re.search(EXPENSION['HOSTNAME']):
            EXPENSION['HOSTBASED'] = k['value']
            log('Matched %s' % EXPENSION['HOSTBASED'], 4)
            return

def __init__():
    log('starting overlay')
    yml = load_yaml('/boot/ramdisk/overlay.yml')
    for y in yml:
        if y is None:
            continue
        compute_hostbased(y)
        log('Expension: %s' % EXPENSION)
        if y.has_key('hard-links'):
            do_compute_files(y['hard-links'], os.link)
        if y.has_key('links'):
            do_compute_files(y['links'], os.symlink, relative=True)
        if y.has_key('move'):
            do_compute_files(y['move'], shutil.move)
        if y.has_key('merge-dir'):
            do_compute_files(y['merge-dir'], do_merge_dir, remove=False)
        if y.has_key('exec'):
            do_execute(y['exec'])

    log('done')
    LOG.close()
            
if __name__ == "__main__":
    __init__()
